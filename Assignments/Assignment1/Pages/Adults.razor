@page "/Adults"
@using Assignment1.Data
@using Assignment1.Persistence
@using Assignment1.Models
@using Microsoft.Net.Http.Headers

@inject NavigationManager NavigationManager
@inject IFamilyData familyData
@inject FileContext FileContext
@inject IJSRuntime JSRuntime


<h2>Families</h2>


<EditForm Model="@currentFamily">
    <InputSelect class="form-control col-sm-4"   Value="@currentFamily.StreetName"
                 ValueChanged="@((string arg) => { FilterByFamily(arg); StateHasChanged(); })"
                 ValueExpression="@(() => currentFamily.StreetName)">
        <option value="none">-- Select streetname --</option>

        @foreach (var family in allFamilies)
        {
            <option value="@family.StreetName"> @family.StreetName</option>
        }
    </InputSelect>
    @if (currentFamily.StreetName == null)
    {
        <p>
            <em>Please select a streetname</em>
        </p>
    }
    else
    {
    <InputSelect class="form-control col-sm-4" @bind-Value="@currentFamily.HouseNumber" @onch="@(() => Filterfamilies())">
        <option value="none">-- Select housenumber --</option>
        @foreach (var number in houseNumbers)
        {
            <option bind-value="@currentFamily.HouseNumber"> @number</option>
        }
    </InputSelect>
    }
</EditForm>


@if (familiesToShow == null)
{
    <p>
        <em>Please select a family</em>
    </p>
}
else if (!familiesToShow.Any())
{
    <p>
        <em>No families exist. Please add some.</em>
    </p>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-sm-4 ">
                <h3>Adults</h3>
                <table class="table table-hover table-striped thead-dark table-light table-bordered">
                    <thead>
                    <tr>
                        <th>Firstname</th> <th>Lastname</th><th>Age</th><th>Job</th><th>Salary</th><th>Remove</th>
                    </tr>
                    </thead>
                    <tbody>

                    @foreach (var family in familiesToShow)
                    {
                        @foreach (var adult in family.Adults)
                        {
                            <tr>
                                <td>@adult.FirstName</td>
                                <td>@adult.LastName</td>
                                <td>@adult.Age</td>
                                <td>@adult.JobTitle.JobTitle</td>
                                <td>@adult.JobTitle.Salary</td>
                                <AuthorizeView Policy="SecurityLevel5">
                                    <td>
                                        <button @onclick="@(() => RemoveAdult(adult.Id))" class="btn btn-light">
                                            <i class="oi oi-trash" style="color:red"/>
                                        </button>
                                    </td>
                                </AuthorizeView>
                            </tr>
                        }
                        <td colspan="2">
                            <p class="font-weight-bold">Family pets:</p> @family.petsToString()
                        </td>
                    }
                    </tbody>
                </table>
                <AuthorizeView Policy="SecurityLevel5">
                    <div>
                        <button @onclick="@(() => RemoveFamily(currentFamily.StreetName, currentFamily.HouseNumber))" class="btn btn-primary"> Remove family </button>
                    </div>
                </AuthorizeView>
            </div>

            @if (familiesToShow == null)
            {
                <p>
                    <em>Loading...</em>
                </p>
            }
            else if (!familiesToShow.Any())
            {
                <p>
                    <em>No adults exist. Please add some.</em>
                </p>
            }
            else
            {
                <div class="col-sm-4 offset-2">
                    <h3>Children</h3>
                    <table class="table table-hover table-striped thead-dark table-light table-bordered">
                        <thead>
                        <tr>
                            <th>Firstname </th> <th>Lastname</th> <th>Age</th> <th>Interests</th><th>Pets</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var family in familiesToShow)
                        {
                            @foreach (var child in family.Children)
                            {
                                <tr>


                                    <td>@child.FirstName</td>
                                    <td>@child.LastName</td>
                                    <td>@child.Age</td>
                                    <td>@child.InterestToString()</td>
                                    <td>@child.petsToString()</td>
                                </tr>
                            }
                        }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}
@* </div> *@


@code {

    FileContext familyfile;

    private IList<Family> familiesToShow;
    private IList<int> houseNumbers = new List<int>();
    private IList<Family> allFamilies;
    private IList<Family> distinctAllFamilies;
    private IList<Child> childrenToShow;
    private IList<Child> allChildren;

    private Family currentFamily = new Family();
    private string streetNamse;

    private string? filterByString;


    protected override async Task OnInitializedAsync()
    {
        Updatefamilies();
        UpdateChildren();
    }

    private void Updatefamilies()
    {
        allFamilies = familyData.GetFamilies();
        familiesToShow = null;
        distinctAllFamilies = allFamilies.Distinct().ToList();
    }

    private void UpdateChildren()
    {
        allChildren = familyData.GetChildren();
        childrenToShow = null;
    }

    private void FilterByFamily(string changeEventArgs)
    {
        currentFamily.StreetName = changeEventArgs;

        houseNumbers.Clear();
        foreach (var family in allFamilies)
        {
            if (family.StreetName.Equals(currentFamily.StreetName))
            {
                houseNumbers.Add(family.HouseNumber);
            }
           
        }
    }

    private void Filterfamilies()
    {
       // currentFamily.HouseNumber = s;
      
        ExecuteFamilyFilter();
       
    }

    private void ExecuteFamilyFilter()
    {
        Console.WriteLine(currentFamily.HouseNumber + " inseide executefamilyssd");
        familiesToShow = allFamilies.Where(f => (currentFamily.StreetName.Equals(f.StreetName) && currentFamily.HouseNumber == f.HouseNumber && currentFamily.StreetName != null)).ToList();
    }


    private void RemoveAdult(int adultId)
    {
        Adult adultToRemove = familyData.GetAdult(adultId);
        familyData.RemoveAdult(adultId);
    }

    async Task RemoveFamily(string streetName, int houseNumber)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove the family at '{currentFamily.StreetName} {currentFamily.HouseNumber}', and all of its members?"))
            return;
        Console.WriteLine(currentFamily.HouseNumber + currentFamily.StreetName);

        Family familyToRemove = allFamilies.FirstOrDefault(f => (currentFamily.StreetName.Equals(f.StreetName) &&currentFamily.HouseNumber==f.HouseNumber && currentFamily.StreetName != null));
        familyData.RemoveFamily(streetName, houseNumber);
        allFamilies.Remove(familyToRemove);
        familiesToShow.Remove(familyToRemove);
    }


}